#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(r32f, binding = 0) uniform image3D field;

layout(std430, binding = 1) buffer agentPos {
    vec4 pos[]; 
};

layout(std430, binding = 2) buffer agentVel {
    vec4 vel[]; 
};

layout(binding = 3) uniform Config {
   float frontness;
   float speed;
   float radius;
   float randomness;
} config;

layout(rgba32f, binding = 4) writeonly uniform image2D outImg;

#define OCTAVES 6.
#define PI 3.14159265359
#define TWOPI 6.28318530718 

uint wang_hash(inout uint seed){

    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float RandomFloat01(inout uint seed) { 
    return float(wang_hash(seed)) / 4294967296.0; 
}

vec3 randomUnitVector3(inout uint seed){

    float z = RandomFloat01(seed) * 2.0f - 1.0f;
    float a = RandomFloat01(seed) * TWOPI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

float readImage3DTrilinear(vec3 uvw) {
    ivec3 imgSize = imageSize(field);
    vec3 pos = uvw * vec3(imgSize) - 0.5;

    ivec3 p0 = ivec3(floor(pos));
    ivec3 p1 = p0 + ivec3(1);

    vec3 f = fract(pos);

    float c000 = imageLoad(field, clamp(p0, ivec3(0), imgSize - 1)).x;
    float c100 = imageLoad(field, clamp(ivec3(p1.x, p0.y, p0.z), ivec3(0), imgSize - 1)).x;
    float c010 = imageLoad(field, clamp(ivec3(p0.x, p1.y, p0.z), ivec3(0), imgSize - 1)).x;
    float c110 = imageLoad(field, clamp(ivec3(p1.x, p1.y, p0.z), ivec3(0), imgSize - 1)).x;

    float c001 = imageLoad(field, clamp(ivec3(p0.x, p0.y, p1.z), ivec3(0), imgSize - 1)).x;
    float c101 = imageLoad(field, clamp(ivec3(p1.x, p0.y, p1.z), ivec3(0), imgSize - 1)).x;
    float c011 = imageLoad(field, clamp(ivec3(p0.x, p1.y, p1.z), ivec3(0), imgSize - 1)).x;
    float c111 = imageLoad(field, clamp(p1, ivec3(0), imgSize - 1)).x;

    float c00 = mix(c000, c100, f.x);
    float c10 = mix(c010, c110, f.x);
    float c01 = mix(c001, c101, f.x);
    float c11 = mix(c011, c111, f.x);

    float c0 = mix(c00, c10, f.y);
    float c1 = mix(c01, c11, f.y);

    return mix(c0, c1, f.z);
}

void main()
{
    const int coord = int(gl_GlobalInvocationID.x);
    if (coord >= 490000) return;

    uint seed = uint(coord*3) + uint((pos[coord].x+2)*9999) + uint((pos[coord].y+2)*9999) + uint((pos[coord].z+2)*9999);

    vec3 front = normalize(vel[coord].xyz);
    vec3 right = normalize(cross(front, vec3(0,1,0)));
    vec3 up = normalize(cross(front, right));

    vec3 senseDir[5];
    senseDir[0] = front;
    senseDir[1] = right;
    senseDir[2] = -right;
    senseDir[3] = up;
    senseDir[4] = -up;

    vec3 meanDir = vec3(0.0);
    float weight = 0.0;

    float mutlplier = 1;//float(coord > 245000)*10 + 1;

    for(int i = 0; i < 5; i++){
        senseDir[i] = normalize(senseDir[i] + front*config.frontness*mutlplier);
        vec3 g = (pos[coord].xyz*0.5 + 0.5) + senseDir[i]*config.radius*mutlplier;
        if(g.x < 0.0 || g.y < 0.0 || g.z < 0.0 || g.x >= 1.0 || g.y >= 1.0 || g.z >= 1.0) continue;
        float density = readImage3DTrilinear(g);// * mix(0.9, 1.0, RandomFloat01(seed));
        meanDir += senseDir[i] * density;
        weight += density;
    }

    meanDir += randomUnitVector3(seed)*config.randomness;

    vel[coord].xyz = weight > 0.0 ? normalize(meanDir) : front;
    vel[coord].xyz *= config.speed;

    vec3 nextPos = pos[coord].xyz + vel[coord].xyz;

    vec3 change = vec3( float(nextPos.x > -1.0 && nextPos.x < 1.0 ),
                        float(nextPos.y > -1.0 && nextPos.y < 1.0 ),
                        float(nextPos.z > -1.0 && nextPos.z < 1.0 )
                    )*2 - 1;

    vel[coord].xyz *= change;

    //pos[coord] = mod(pos[coord] + 1.0, 2.0) - 1.0;
    ivec3 gridPos = ivec3((pos[coord].xyz*0.5 + 0.5) * 512);
    float curr = imageLoad(field, gridPos).x;

    barrier();
    float toWrite = weight > 0.0 ? max(10, curr + 0.01) : max(10,curr);//max(curr, weight/5);
    pos[coord].w = toWrite;
    imageStore(field, gridPos, vec4(toWrite));

    pos[coord].xyz += vel[coord].xyz;//*RandomFloat01(seed);
    imageStore(outImg, ivec2(coord % 700, int(float(coord) / 700.0)), pos[coord]);
}
